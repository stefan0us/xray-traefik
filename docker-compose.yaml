version: '3'

networks:
  monitor:
    driver: bridge
  traefik:
    driver: bridge

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    networks:
      - traefik
      - monitor
    ports:
      - '80:80'
    #   - '443:443'
    command:
      - --api.insecure=false
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=DEBUG
      - --log.filePath=/var/log/traefik/traefik.log
      - --accesslog.fields.names.StartUTC=drop
      - --accesslog=true
      - --accesslog.filePath=/var/log/traefik/access.log
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web-secured.address=:443
      - --entryPoints.web-secured.proxyProtocol.insecure
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    environment:
      TZ: Asia/Shanghai
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_API_KEY: ${CF_API_KEY}
    volumes:
      - ./traefik/letsencrypt:/letsencrypt
      - ./traefik/log:/var/log/traefik
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    labels:
      traefik.enable: true
      traefik.http.routers.http_catchall.rule: hostregexp(`{host:.*}`)
      traefik.http.routers.http_catchall.entryPoints: web
      traefik.http.routers.http_catchall.middlewares: redirect_https
      traefik.http.routers.traefik.rule: Host(`traefik.${SERVER_DOMAIN}`)
      traefik.http.routers.traefik.entryPoints: web-secured
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.tls.certresolver: myresolver
      traefik.http.routers.traefik.tls.domains[0].main: "$SERVER_DOMAIN"
      traefik.http.routers.traefik.tls.domains[0].sans: "*.${SERVER_DOMAIN}"
      traefik.http.middlewares.redirect_https.redirectscheme.scheme: https

  whoami:
    image: traefik/whoami
    container_name: 'whoami'
    restart: unless-stopped
    networks:
      - traefik
    environment:
      TZ: Asia/Shanghai
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.rule: Host(`whoami.${SERVER_DOMAIN}`)
      traefik.http.routers.whoami.entrypoints: web-secured
      traefik.http.routers.whoami.tls.certresolver: myresolver

  xray:
    image: teddysun/xray
    container_name: xray
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    networks:
      - traefik
      - monitor
    volumes: 
      - ./xray/config:/etc/xray
      - ./xray/log:/var/log/xray
    ports:
      - 443:443
    expose:
      - 3000
      - 3001
      - 3002
      - 10085
    labels:
      traefik.enable: true

      traefik.http.routers.xray_vmess.rule: Host(`${SERVER_DOMAIN}`) && Path(`/vmess-ws`)
      traefik.http.routers.xray_vmess.service: xray_vmess
      traefik.http.routers.xray_vmess.entrypoints: web-secured
      traefik.http.routers.xray_vmess.tls: true
      traefik.http.routers.xray_vmess.tls.certresolver: myresolver
      traefik.http.services.xray_vmess.loadbalancer.server.port: 3000

      traefik.http.routers.xray_vless.rule: Host(`${SERVER_DOMAIN}`) && Path(`/vless-h2`)
      traefik.http.routers.xray_vless.service: xray_vless
      traefik.http.routers.xray_vless.entrypoints: web-secured
      traefik.http.routers.xray_vless.tls: true
      traefik.http.routers.xray_vless.tls.certresolver: myresolver
      traefik.http.services.xray_vless.loadbalancer.server.port: 3001
      traefik.http.services.xray_vless.loadbalancer.server.scheme: h2c

      traefik.http.routers.xray_grpc.rule: Host(`${SERVER_DOMAIN}`) && Path(`/GunService/Tun`)
      traefik.http.routers.xray_grpc.service: xray_grpc
      traefik.http.routers.xray_grpc.entrypoints: web-secured
      traefik.http.routers.xray_grpc.tls: true
      traefik.http.routers.xray_grpc.tls.certresolver: myresolver
      traefik.http.services.xray_grpc.loadbalancer.server.port: 3002
      traefik.http.services.xray_grpc.loadbalancer.server.scheme: h2c

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: root
    restart: unless-stopped
    environment:
     DS_PROMETHEUS: prometheus
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - traefik
      - monitor
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.rule: Host(`grafana.${SERVER_DOMAIN}`)
      traefik.http.routers.grafana.entrypoints: web-secured
      traefik.http.routers.grafana.tls.certresolver: myresolver

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    user: root
    restart: unless-stopped
    volumes:
      - ./prometheus/data:/prometheus
      - ./prometheus/config:/etc/prometheus
    networks:
      - monitor
    command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--web.enable-admin-api'
        - '--web.enable-lifecycle'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitor
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  v2ray-exporter:
    image: wi1dcard/v2ray-exporter:master
    container_name: v2ray-exporter
    networks:
      - monitor
    restart: unless-stopped
    command: 'v2ray-exporter --v2ray-endpoint "xray:10085" --listen ":9550"'
